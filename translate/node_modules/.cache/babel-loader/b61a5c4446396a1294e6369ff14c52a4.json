{"ast":null,"code":"var _jsxFileName = \"/Users/rominalodolo/Desktop/GitHub/REACT/modernreactwithredux/translate/src/components/translate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst doTranslation = async (input, languageCode, cancelToken) => {\n  try {\n    const {\n      data\n    } = await axios.post(\"https://translation.googleapis.com/language/translate/v2?key=AIzaSyCf0Xy0OnhxlduyEt3K8zP-sOuu-l_u6uA\", {\n      q: input,\n      target: languageCode\n    }, {\n      cancelToken: cancelToken.token\n    });\n    return data.data.translations[0].translatedText;\n  } catch (err) {\n    return \"\";\n  }\n};\n\nexport default _s(_ref => {\n  _s();\n\n  let {\n    language,\n    text\n  } = _ref;\n  const [translated, setTranslated] = useState(\"\");\n  useEffect(() => {\n    if (!text) {\n      return;\n    }\n\n    const cancelToken = axios.CancelToken.source();\n    doTranslation(text, language, cancelToken).then(setTranslated);\n    return () => {\n      try {\n        cancelToken.cancel();\n      } catch (err) {}\n    };\n  }, [text, language]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"label\",\n      children: \"Output\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: translated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}, \"0L79cAGwCaXtdL2OzK0viXUUv4Q=\");","map":{"version":3,"sources":["/Users/rominalodolo/Desktop/GitHub/REACT/modernreactwithredux/translate/src/components/translate.js"],"names":["React","useEffect","useState","axios","doTranslation","input","languageCode","cancelToken","data","post","q","target","token","translations","translatedText","err","language","text","translated","setTranslated","CancelToken","source","then","cancel"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,aAAa,GAAG,OAAOC,KAAP,EAAcC,YAAd,EAA4BC,WAA5B,KAA4C;AAChE,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAML,KAAK,CAACM,IAAN,CACrB,sGADqB,EAErB;AACEC,MAAAA,CAAC,EAAEL,KADL;AAEEM,MAAAA,MAAM,EAAEL;AAFV,KAFqB,EAMrB;AAAEC,MAAAA,WAAW,EAAEA,WAAW,CAACK;AAA3B,KANqB,CAAvB;AASA,WAAOJ,IAAI,CAACA,IAAL,CAAUK,YAAV,CAAuB,CAAvB,EAA0BC,cAAjC;AACD,GAXD,CAWE,OAAOC,GAAP,EAAY;AACZ,WAAO,EAAP;AACD;AACF,CAfD;;AAiBA,kBAAe,QAAwB;AAAA;;AAAA,MAAvB;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAuB;AACrC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,EAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACgB,IAAL,EAAW;AACT;AACD;;AAED,UAAMV,WAAW,GAAGJ,KAAK,CAACiB,WAAN,CAAkBC,MAAlB,EAApB;AAEAjB,IAAAA,aAAa,CAACa,IAAD,EAAOD,QAAP,EAAiBT,WAAjB,CAAb,CAA2Ce,IAA3C,CAAgDH,aAAhD;AAEA,WAAO,MAAM;AACX,UAAI;AACFZ,QAAAA,WAAW,CAACgB,MAAZ;AACD,OAFD,CAEE,OAAOR,GAAP,EAAY,CAAE;AACjB,KAJD;AAKD,GAdQ,EAcN,CAACE,IAAD,EAAOD,QAAP,CAdM,CAAT;AAgBA,sBACE;AAAA,4BACE;AAAO,MAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA,gBAAuBE;AAAvB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAzBD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst doTranslation = async (input, languageCode, cancelToken) => {\n  try {\n    const { data } = await axios.post(\n      \"https://translation.googleapis.com/language/translate/v2?key=AIzaSyCf0Xy0OnhxlduyEt3K8zP-sOuu-l_u6uA\",\n      {\n        q: input,\n        target: languageCode,\n      },\n      { cancelToken: cancelToken.token }\n    );\n\n    return data.data.translations[0].translatedText;\n  } catch (err) {\n    return \"\";\n  }\n};\n\nexport default ({ language, text }) => {\n  const [translated, setTranslated] = useState(\"\");\n\n  useEffect(() => {\n    if (!text) {\n      return;\n    }\n\n    const cancelToken = axios.CancelToken.source();\n\n    doTranslation(text, language, cancelToken).then(setTranslated);\n\n    return () => {\n      try {\n        cancelToken.cancel();\n      } catch (err) {}\n    };\n  }, [text, language]);\n\n  return (\n    <div>\n      <label className=\"label\">Output</label>\n      <h1 className=\"title\">{translated}</h1>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}